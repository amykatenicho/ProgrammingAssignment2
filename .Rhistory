R.version.string
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<- x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt<- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
x <- c(1,2,3,4)
solve(x)
y<- matrix(1 2 3 4, 2)
y<- matrix(1:6,2)
y
y<- matrix(1:4,2)
y
slve(y)
solve(y)
setwd("~/GitHub/ProgrammingAssignment2")
ls()
test <- matrix(1:4,2)
test
makeCacheMatrix(test)
source("cachematrix.R")
ls
ls()
makeCacheMatrix(test)
i
test2 <- matrix(1:9,3)
test2
makeCacheMatrix(test2)
makeCacheMatrix(test2)
makeCacheMatrix(test2)
makeCacheMatrix(test2)
source("cachematrix.R")
makeCacheMatrix(test2)
i
View(test)
View(test2)
matrix()
d <- matrix()
d
is.null(d)
is.na(d)
d <- matrix(1:4,2)
is.na(d)
source("cachematrix.R")
makeCacheMatrix(d)
$getinverse
getinverse
cacheSolve(d)
source("example.R")
setwd("C:/Users/amynic/Desktop/Coursera-R")
source("example.R")
source("example.R")
ls()
makeVector(1:4)
V<- makeVector(1:10)
cachemean(V)
debug()
V<- makeVector(1:100)
cachemean(V)
cachemean(V)
w<- makeVector(1:10)
cachemean(w)
cachemean(V)
cachemean(w)
setwd("~/GitHub/ProgrammingAssignment2")
source("cachematrix.R")
makeCacheMatrix(1:9)
setwd("C:/Users/amynic/Desktop/Coursera-R")
source("example.R")
m<- null
m<- NULL
x<- numeric()
x
get<- function() NULL
get
a<- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
cahcemean(a)
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
a$setmean(0)
a$getmean()
a$get()
a<- makeVector(c(5,25,125,625))
a$get()
cachemean(a)
cachemean(a)
1:6.numeric()
a$get()
function() a
setwd("~/GitHub/ProgrammingAssignment2")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSlve(amatrix)
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
is.matrix(matrix())
cacheSolve(amatrix)
source("cachematrix.R")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
a <- matrix(1:9,3)
a
b<- matrix()
b
is.matrix(b)
is.matrix(a)
!all(is.na(a))
all(is.na(a))
all(is.na(b))
source("cachematrix.R")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
cacheSolve(amatrix)
source("cachematrix.R")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
